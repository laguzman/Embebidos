# !/usr/bin/env python3
# Generated by Proteus Visual Designer for Raspberry Pi

# Modules
import ports
import PrintList
from time import*
import requests
import random
import math
from time import sleep
from wiringpi import Serial
import RPi.GPIO as GPIO
from time import*
import requests
import math
import random

TOKEN = "BBFF-MS5mIbLn9XkMlSh2ztWDvJhBWDWl9k"
DEVICE_LABEL = "PROYECTO"  # Put your device label here 
VARIABLE_LABEL_1 = "TEMPERATURA"  # Put your first variable label here
VARIABLE_LABEL_2 = "HUMEDAD"  # Put your second variable label here




GPIO.setmode(GPIO.BCM) #puede cambiar a BOARD
global led1
led1 = 4  #si cambiar de BCM a Board defina el número del pin acorde a los pines de la raspberry
global led2
led2 = 5 #si cambiar de BCM a Board defina el número del pin acorde a los pines de la raspberry

GPIO.setup(led1, GPIO.OUT)
GPIO.setup(led2, GPIO.OUT)

baud = 9600
ser  = Serial("/dev/serial0",baud)


def build_payload(variable_1, variable_2,v1,v2):
    # Creates two random values for sending data
    value_1 = v1
    value_2 = v2
    print(v1)
    print(v2)
    print ("CONECTADO...")
    payload = {variable_1: value_1,
              variable_2: value_2}

    return payload

def post_request(payload):
    # Creates the headers for the HTTP requests
    url = "http://industrial.api.ubidots.com"
    url = "{}/api/v1.6/devices/{}".format(url, DEVICE_LABEL)
    headers = {"X-Auth-Token": TOKEN, "Content-Type": "application/json"}

    # Makes the HTTP requests
    status = 400
    attempts = 0
    while status >= 400 and attempts <= 5:
        req = requests.post(url=url, headers=headers, json=payload)
        status = req.status_code
        attempts += 1
        

    # Processes results
    if status >= 400:
        print("[ERROR] Could not send data after 5 attempts, please check \
            your token credentials and internet connection")
        return False

    print("[INFO] request made properly, your device is updated")
    return True 
    
def recibir(echo = True):
 data = ""
 while True:
  input = ser.getchar()
  if echo:
   ser.putchar(input)
  if input == "\n":
   return (data)
  data += input
 
  
def printsln(menss):
 ser.puts(menss+"\r")
 sleep(0.2)

def prints(menss):
 ser.puts(menss)
 sleep(0.2)

# Main function
def main () :
# Infinite loop
 while True :
  mensaje = recibir()
  if (","  in mensaje ):
   print(mensaje)
   vals = mensaje.strip().split(',')
   print(vals)
   if (len(vals)==2):
    vs1=float(vals[0])
    vs2=float(vals[1])
    payload = build_payload(
    VARIABLE_LABEL_1, VARIABLE_LABEL_2, vs1,vs2)
    print("[INFO] Attemping to send data")
    post_request(payload)
    print("[INFO] finished")
  
  
# Command line execution
if __name__ == '__main__' :
 main()
